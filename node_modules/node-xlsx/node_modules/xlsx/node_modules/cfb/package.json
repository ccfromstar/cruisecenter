{
  "name": "cfb",
  "version": "1.0.2",
  "author": {
    "name": "sheetjs"
  },
  "description": "Compound File Binary File Format extractor",
  "keywords": [
    "cfb",
    "compression",
    "office"
  ],
  "bin": {
    "cfb": "./bin/cfb.njs"
  },
  "main": "./cfb",
  "types": "types",
  "browser": {
    "node": false,
    "process": false,
    "fs": false
  },
  "dependencies": {
    "commander": "^2.12.1",
    "printj": "~1.1.1"
  },
  "devDependencies": {
    "crc-32": "~1.1.1",
    "mocha": "~2.5.3",
    "blanket": "~1.2.3",
    "@sheetjs/uglify-js": "~2.7.3",
    "@types/node": "^8.0.7",
    "@types/commander": "^2.9.0",
    "dtslint": "~0.1.2",
    "typescript": "2.2.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-cfb.git"
  },
  "scripts": {
    "pretest": "make init",
    "test": "make test",
    "dtslint": "dtslint types"
  },
  "config": {
    "blanket": {
      "pattern": "cfb.js"
    }
  },
  "files": [
    "LICENSE",
    "README.md",
    "bin/",
    "dist/",
    "types/index.d.ts",
    "types/tsconfig.json",
    "cfb.js",
    "xlscfb.flow.js"
  ],
  "homepage": "http://sheetjs.com/opensource",
  "bugs": {
    "url": "https://github.com/SheetJS/js-cfb/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# Compound File Binary Format\n\nPure JS implementation of MS-CFB: Compound File Binary File Format, a container\nformat used in many Microsoft file types (XLS, DOC, VBA blobs in XLSX and XLSB)\n\n[![Build Status](https://travis-ci.org/SheetJS/js-cfb.svg?branch=master)](https://travis-ci.org/SheetJS/js-cfb)\n[![Coverage Status](http://img.shields.io/coveralls/SheetJS/js-cfb/master.svg)](https://coveralls.io/r/SheetJS/js-cfb?branch=master)\n[![Dependencies Status](https://david-dm.org/sheetjs/js-cfb/status.svg)](https://david-dm.org/sheetjs/js-cfb)\n[![NPM Downloads](https://img.shields.io/npm/dt/cfb.svg)](https://npmjs.org/package/cfb)\n[![ghit.me](https://ghit.me/badge.svg?repo=sheetjs/js-xlsx)](https://ghit.me/repo/sheetjs/js-xlsx)\n[![Analytics](https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/js-cfb?pixel)](https://github.com/SheetJS/js-cfb)\n\n## Installation\n\nIn the browser:\n\n```html\n<script src=\"dist/cfb.min.js\" type=\"text/javascript\"></script>\n```\n\nWith [npm](https://www.npmjs.org/package/cfb):\n\n```bash\n$ npm install cfb\n```\n\nThe `xlscfb.js` file is designed to be embedded in [js-xlsx](http://git.io/xlsx)\n\n\n## Library Usage\n\nIn node:\n\n```js\nvar CFB = require('cfb');\n```\n\nFor example, to get the Workbook content from an Excel 2003 XLS file:\n\n```js\nvar cfb = CFB.read(filename, {type: 'file'});\nvar workbook = CFB.find(cfb, 'Workbook');\nvar data = workbook.content;\n```\n\n\n## Command-Line Utility Usage\n\nIt is preferable to install the library globally with npm:\n\n```bash\n$ npm install -g cfb\n```\n\nThe global installation adds a command `cfb` which can work with files:\n\n- `cfb file [names...]` extracts the contents of the file.  If additional names\n  are supplied, only the listed files will be extracted.\n\n- `cfb -l file` lists the contained files (following `unzip -l` \"short format\")\n\n- `cfb -r file` attempts to repair by reading and re-writing the file.\n  This fixes some issues with files generated by non-standard tools.\n\n- `cfb -c file [files...]` creates a new file containing the listed files.\n  The default root entry name is `Root Entry`.\n\n- `cfb -a file [files...]` adds the listed files to the original file.\n\n- `cfb -d file [files...]` deletes the listed files from the original file.\n\n\n## JS API\n\nTypeScript definitions are maintained in `types/index.d.ts`.\n\nThe CFB object exposes the following methods and properties:\n\n`CFB.parse(blob)` takes a nodejs Buffer or an array of bytes and returns an\nparsed representation of the data.\n\n`CFB.read(blob, opts)` wraps `parse`.  `opts.type` controls the behavior:\n\n| `type`     | expected input                                                  |\n|------------|-----------------------------------------------------------------|\n| `\"base64\"` | string: Base64 encoding of the file                             |\n| `\"binary\"` | string: binary string (byte `n` is `data.charCodeAt(n)`)        |\n| `\"file\"`   | string: path of file that will be read (nodejs only)            |\n| (default)  | buffer or array of 8-bit unsigned int (byte `n` is `data[n]`)   |\n\n`CFB.find(cfb, path)` performs a case-insensitive match for the path (or file\nname, if there are no slashes) and returns an entry object or null if not found.\n\n`CFB.write(cfb, opts)` generates a file based on the container.  `opts.type`\ncontrols the behavior:\n\n| `type`     | output                                                          |\n|------------|-----------------------------------------------------------------|\n| `\"base64\"` | string: Base64 encoding of the file                             |\n| `\"binary\"` | string: binary string (byte `n` is `data.charCodeAt(n)`)        |\n| (default)  | buffer if available, array of 8-bit unsigned int otherwise      |\n\n`CFB.writeFile(cfb, filename, opts)` creates a file with the specified name.\n\n\n## Utility Functions\n\nThe utility functions are available in the `CFB.utils` object.  Functions that\naccept a `name` argument strictly deal with absolute file names:\n\n- `.cfb_new(?opts)` creates a new container object.\n- `.cfb_add(cfb, name, ?content, ?opts)` adds a new file to the `cfb`.\n- `.cfb_del(cfb, name)` deletes the specified file\n- `.cfb_mov(cfb, old_name, new_name)` moves the old file to new path and name\n\n\n## Container Object Description\n\nThe objects returned by `parse` and `read` have the following properties:\n\n- `.FullPaths` is an array of the names of all of the streams (files) and\n  storages (directories) in the container.  The paths are properly prefixed from\n  the root entry (so the entries are unique)\n\n- `.FileIndex` is an array, in the same order as `.FullPaths`, whose values are\n  objects following the schema:\n\n```typescript\ninterface CFBEntry {\n  name: string; /** Case-sensitive internal name */\n  type: number; /** 1 = dir, 2 = file, 5 = root ; see [MS-CFB] 2.6.1 */\n  content: Buffer | number[] | Uint8Array; /** Raw Content */\n  ct?: Date; /** Creation Time */\n  mt?: Date; /** Modification Time */\n}\n```\n\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 License are reserved by the Original Author.\n\n\n## References\n\n\n<details>\n\t<summary><b>OSP-covered Specifications</b> (click to show)</summary>\n\n - [MS-CFB]: Compound File Binary File Format\n\n</details>\n\n",
  "readmeFilename": "README.md",
  "_id": "cfb@1.0.2",
  "dist": {
    "shasum": "a36f46c8a9831b91999b68fc24d031f717adfb1d"
  },
  "_from": "cfb@~1.0.2",
  "_resolved": "https://registry.npmjs.org/cfb/-/cfb-1.0.2.tgz"
}
